
From CPL Require Import Logic_and_Set_Theory.


(*Consistency:*)
Definition Cons (Gamma : Ensemble Formula) : Prop :=
~(Gamma |- ~T).

Definition iCons (Gamma : Ensemble Formula) : Prop :=
(Gamma |- ~T).



Lemma iConsEqiv : forall(Gamma : Ensemble Formula),
(exists f:Formula, In Formula Gamma f /\ In Formula Gamma (~' f))->iCons Gamma.
Proof. intros Gamma H. unfold iCons. destruct H. rename x into f.
apply negE with (f:=f). +apply ax. apply H.
+apply ax. apply H.
Qed.  


(*From Summer!!!:*)
(*Lemma 1.4.5 (used in main proof!) *)
Lemma ConsSyns0: forall (Gamma:Ensemble Formula) (f:Formula),
iCons(Union Formula Gamma (Singleton Formula (~' f))) <-> Gamma |- f.
Proof.
    intros Gamma f.
    split.
    +intros H. unfold iCons in H. apply RAA in H. apply H.
    +intros H. unfold iCons. apply negE with (f:=f). -apply Weakening. apply H. 
        -apply ax. apply Union_intror. apply In_singleton.
    Qed.

Axiom contraposition : forall (P Q :Prop), (P <-> Q) -> (~P <-> ~Q).
Lemma ConsSyns: forall (Gamma:Ensemble Formula) (f:Formula),
Cons(Union Formula Gamma (Singleton Formula (~' f))) <-> ~Gamma |- f.
Proof.
  intros Gamma f.
  apply contraposition. apply ConsSyns0.
  Qed.
  (*End Summer!!!*)


